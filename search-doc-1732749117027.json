{"searchDocs":[{"title":"ExtenderService","type":0,"sectionRef":"#","url":"/api/ExtenderService","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ExtenderService","url":"/api/ExtenderService#functions","content":" ","version":null,"tagName":"h2"},{"title":"ExtendInstance​","type":1,"pageTitle":"ExtenderService","url":"/api/ExtenderService#ExtendInstance","content":"&lt;/&gt; ExtenderService:ExtendInstance( instance: Instance , classThatExtends: Class, exposeProperties: boolean? ) → Object    ","version":null,"tagName":"h3"},{"title":"GetClassExtension​","type":1,"pageTitle":"ExtenderService","url":"/api/ExtenderService#GetClassExtension","content":"&lt;/&gt; ExtenderService:GetClassExtension(instance: Instance ) → Object   ","version":null,"tagName":"h3"},{"title":"Dribble","type":0,"sectionRef":"#","url":"/api/Dribble","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Dribble","url":"/api/Dribble#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Dribble","url":"/api/Dribble#new","content":"&lt;/&gt; Dribble.new(client: VRFLocalClient) → Dribble  ","version":null,"tagName":"h3"},{"title":"VRFBall","type":0,"sectionRef":"#","url":"/api/VRFBall","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"VRFBall","url":"/api/VRFBall#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"VRFBall","url":"/api/VRFBall#new","content":"&lt;/&gt; VRFBall.new(positionOrPBOwner: Vector3 | Player ) → VRFBall   ","version":null,"tagName":"h3"},{"title":"SpawnBall​","type":1,"pageTitle":"VRFBall","url":"/api/VRFBall#SpawnBall","content":"&lt;/&gt; VRFBall:SpawnBall(newPosition: Vector3? ) → () Spawns the ball at the new position, if it is nil then it spawns at the PBOwner if it exists  ","version":null,"tagName":"h3"},{"title":"SetTheme​","type":1,"pageTitle":"VRFBall","url":"/api/VRFBall#SetTheme","content":"&lt;/&gt; VRFBall:SetTheme(newTheme: Theme) → ()   ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"VRFBall","url":"/api/VRFBall#Destroy","content":"&lt;/&gt; VRFBall:Destroy() → ()  ","version":null,"tagName":"h3"},{"title":"VRFLocalClient","type":0,"sectionRef":"#","url":"/api/VRFLocalClient","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#functions","content":" ","version":null,"tagName":"h2"},{"title":"GetMainSide​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#GetMainSide","content":"&lt;/&gt; VRFLocalClient:GetMainSide() → Side   ","version":null,"tagName":"h3"},{"title":"GetAlternateSide​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#GetAlternateSide","content":"&lt;/&gt; VRFLocalClient:GetAlternateSide() → Side   ","version":null,"tagName":"h3"},{"title":"InitialiseTools​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#InitialiseTools","content":"&lt;/&gt; VRFLocalClient:InitialiseTools() → ()   ","version":null,"tagName":"h3"},{"title":"MirrorCFrame​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#MirrorCFrame","content":"&lt;/&gt; VRFLocalClient:MirrorCFrame( cf: CFrame , mirrorRotation: boolean ) → CFrame    ","version":null,"tagName":"h3"},{"title":"TweenWeld​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#TweenWeld","content":"&lt;/&gt; VRFLocalClient:TweenWeld( legEnumOrArmEnumOrLimbEnum: EnumItem, tweenInfo: TweenInfo? , c0: CFrame , c1: CFrame? , forceLegMirror: boolean? ) → ()   ","version":null,"tagName":"h3"},{"title":"ReloadTouchConnections​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#ReloadTouchConnections","content":"&lt;/&gt; VRFLocalClient:ReloadTouchConnections(character: Character) → ()   ","version":null,"tagName":"h3"},{"title":"SetOnReactFunction​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#SetOnReactFunction","content":"&lt;/&gt; VRFLocalClient:SetOnReactFunction( limbEnum: Limb , funcOrNil: (ball: Instance ) → () | nil, usesPowerBar: boolean ) → ()   ","version":null,"tagName":"h3"},{"title":"IsInputThisMove​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#IsInputThisMove","content":"&lt;/&gt; VRFLocalClient:IsInputThisMove( input: Input, folderName: string, moveName: string ) → boolean   ","version":null,"tagName":"h3"},{"title":"SwitchFoot​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#SwitchFoot","content":"&lt;/&gt; VRFLocalClient:SwitchFoot() → ()   ","version":null,"tagName":"h3"},{"title":"GetUsingMove​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#GetUsingMove","content":"&lt;/&gt; VRFLocalClient:GetUsingMove() → ()   ","version":null,"tagName":"h3"},{"title":"SetUsingMove​","type":1,"pageTitle":"VRFLocalClient","url":"/api/VRFLocalClient#SetUsingMove","content":"&lt;/&gt; VRFLocalClient:SetUsingMove(usingMove: boolean) → ()  ","version":null,"tagName":"h3"},{"title":"VRFTool","type":0,"sectionRef":"#","url":"/api/VRFTool","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"VRFTool","url":"/api/VRFTool#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"VRFTool","url":"/api/VRFTool#new","content":"&lt;/&gt; VRFTool.new( client: VRFLocalClient, toolName: string ) → ()   ","version":null,"tagName":"h3"},{"title":"ConvertToLimbEnum​","type":1,"pageTitle":"VRFTool","url":"/api/VRFTool#ConvertToLimbEnum","content":"&lt;/&gt; VRFTool:ConvertToLimbEnum(legEnumOrArmEnumOrLimbEnum: Leg | Arm | Limb ) → Limb    ","version":null,"tagName":"h3"},{"title":"ConvertToKeybind​","type":1,"pageTitle":"VRFTool","url":"/api/VRFTool#ConvertToKeybind","content":"&lt;/&gt; VRFTool:ConvertToKeybind(keybindString: string) → Keybind ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"VRFTool","url":"/api/VRFTool##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"VRFTool","url":"/api/VRFTool#Keybind","content":"type Keybind = Enum.KeyCode | Enum.UserInputType    ","version":null,"tagName":"h3"},{"title":"CreateMove​","type":1,"pageTitle":"VRFTool","url":"/api/VRFTool#CreateMove","content":"&lt;/&gt; VRFTool:CreateMove( moveName: string, moveFunction: (SetReact: ( legEnumOrArmEnumOrLimbEnum: Leg | Arm | Limb , enabled: boolean ) → ()) → (), onReactFunction: ( ball: VRFBallClient, limbReactedWith: Instance , reactIndex: number ) → () ) → ()   ","version":null,"tagName":"h3"},{"title":"CreateHoldingMove​","type":1,"pageTitle":"VRFTool","url":"/api/VRFTool#CreateHoldingMove","content":"&lt;/&gt; VRFTool:CreateHoldingMove( moveName: string, onHold: () → (), onReactFunction: ( ball: VRFBallClient, limbReactedWith: Instance , reactIndex: number, comboUsed: string, angleBarPercentage: number, powerBarPercentage: number? ) → (), onRelease: ( SetReact: ( legEnumOrArmEnumOrLimbEnum: Leg | Arm | Limb , enabled: boolean ) → (), comboChosen: string ) → (), usesPowerBar: boolean? ) → ()   ","version":null,"tagName":"h3"},{"title":"SetParent​","type":1,"pageTitle":"VRFTool","url":"/api/VRFTool#SetParent","content":"&lt;/&gt; VRFTool:SetParent(newParent: Instance ) → ()   ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"VRFTool","url":"/api/VRFTool#Destroy","content":"&lt;/&gt; VRFTool:Destroy() → ()  ","version":null,"tagName":"h3"},{"title":"VRFClient","type":0,"sectionRef":"#","url":"/api/VRFClient","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"VRFClient","url":"/api/VRFClient#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"VRFClient","url":"/api/VRFClient#new","content":"&lt;/&gt; VRFClient.new( player: Player -- The ROBLOX Player object ) → VRFClient    ","version":null,"tagName":"h3"},{"title":"UpdateJointsAndLimbs​","type":1,"pageTitle":"VRFClient","url":"/api/VRFClient#UpdateJointsAndLimbs","content":"&lt;/&gt; VRFClient:UpdateJointsAndLimbs() → () Reloads the joints and limbs stored by the class, usually called when a player's character is respawned  ","version":null,"tagName":"h3"},{"title":"ResetWelds​","type":1,"pageTitle":"VRFClient","url":"/api/VRFClient#ResetWelds","content":"&lt;/&gt; VRFClient:ResetWelds(tweenInfo: TweenInfo? ) → () Removes all existing welds corresponding to any limbs.  ","version":null,"tagName":"h3"},{"title":"TweenWeld​","type":1,"pageTitle":"VRFClient","url":"/api/VRFClient#TweenWeld","content":"&lt;/&gt; VRFClient:TweenWeld( limbEnum: EnumItem, tweenInfo: TweenInfo? , c0: CFrame , c1: CFrame? ) → () Tweens a weld corresponding to a limbName to the given C0 and C1. A new weld is created if there is not an existing weld for that limb. If tweenInfo is nil then the tween is instant.  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"VRFClient","url":"/api/VRFClient#Destroy","content":"&lt;/&gt; VRFClient:Destroy() → ()  ","version":null,"tagName":"h3"},{"title":"VRFEnum","type":0,"sectionRef":"#","url":"/api/VRFEnum","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#types","content":" ","version":null,"tagName":"h2"},{"title":"EnumItem​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#EnumItem","content":"&lt;/&gt; type EnumItem = { Name: string, Value: number, EnumType: string }   ","version":null,"tagName":"h3"},{"title":"EnumType​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#EnumType","content":"&lt;/&gt; type EnumType = {EnumItem}   ","version":null,"tagName":"h3"},{"title":"VRFEnum​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#VRFEnum","content":"&lt;/&gt; type VRFEnum = {EnumType}  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#properties","content":" ","version":null,"tagName":"h2"},{"title":"Limb​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#Limb","content":"&lt;/&gt; VRFEnum.Limb: EnumType   ","version":null,"tagName":"h3"},{"title":"Leg​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#Leg","content":"&lt;/&gt; VRFEnum.Leg: EnumType   ","version":null,"tagName":"h3"},{"title":"Arm​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#Arm","content":"&lt;/&gt; VRFEnum.Arm: EnumType   ","version":null,"tagName":"h3"},{"title":"Side​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#Side","content":"&lt;/&gt; VRFEnum.Side: EnumType   ","version":null,"tagName":"h3"},{"title":"Theme​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#Theme","content":"&lt;/&gt; VRFEnum.Theme: EnumType  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#functions","content":" ","version":null,"tagName":"h2"},{"title":"Serialize​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#Serialize","content":"&lt;/&gt; VRFEnum:Serialize(enumItem: EnumItem) → serializedEnumItemtable Preparing an EnumItem to be sent through the client/server boundary.  ","version":null,"tagName":"h3"},{"title":"Deserialize​","type":1,"pageTitle":"VRFEnum","url":"/api/VRFEnum#Deserialize","content":"&lt;/&gt; VRFEnum:Deserialize(serializedEnumItem: table) → enumItemEnumItem This adds back the metatable lost from transferring an EnumItem across the client/server boundary. ","version":null,"tagName":"h3"},{"title":"Maid","type":0,"sectionRef":"#","url":"/api/Maid","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Maid","url":"/api/Maid#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Maid","url":"/api/Maid#new","content":"&lt;/&gt; Maid.new() → Maid   ","version":null,"tagName":"h3"},{"title":"GiveTask​","type":1,"pageTitle":"Maid","url":"/api/Maid#GiveTask","content":"&lt;/&gt; Maid:GiveTask(task: Task) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Maid","url":"/api/Maid##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Maid","url":"/api/Maid#Task","content":"type Task = RBXScriptConnection | function    ","version":null,"tagName":"h3"},{"title":"DoCleaning​","type":1,"pageTitle":"Maid","url":"/api/Maid#DoCleaning","content":"&lt;/&gt; Maid:DoCleaning() → ()  ","version":null,"tagName":"h3"},{"title":"VRFBallClient","type":0,"sectionRef":"#","url":"/api/VRFBallClient","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"VRFBallClient","url":"/api/VRFBallClient#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"VRFBallClient","url":"/api/VRFBallClient#new","content":"&lt;/&gt; VRFBallClient.new(ball: Instance ) → VRFBallClient   ","version":null,"tagName":"h3"},{"title":"UpdateNetworkOwner​","type":1,"pageTitle":"VRFBallClient","url":"/api/VRFBallClient#UpdateNetworkOwner","content":"&lt;/&gt; VRFBallClient:UpdateNetworkOwner(networkOwner: Player ) → ()   ","version":null,"tagName":"h3"},{"title":"GetNetworkOwner​","type":1,"pageTitle":"VRFBallClient","url":"/api/VRFBallClient#GetNetworkOwner","content":"&lt;/&gt; VRFBallClient:GetNetworkOwner() → Player    ","version":null,"tagName":"h3"},{"title":"ApplyVelocity​","type":1,"pageTitle":"VRFBallClient","url":"/api/VRFBallClient#ApplyVelocity","content":"&lt;/&gt; VRFBallClient:ApplyVelocity( reactIndex: number, velocity: Vector3 , maxAxesForce: Vector3? ) → () If maxAxesForce is nil then Vector3.new(math.huge, math.huge, math.huge) is assumed. reactIndex is to filter out and prevent old reacts from occurring.  ","version":null,"tagName":"h3"},{"title":"ApplyForce​","type":1,"pageTitle":"VRFBallClient","url":"/api/VRFBallClient#ApplyForce","content":"&lt;/&gt; VRFBallClient:ApplyForce( reactIndex: number, force: Vector3 ) → () reactIndex is to filter out and prevent old reacts from occurring.  ","version":null,"tagName":"h3"},{"title":"StopVelocityAndForce​","type":1,"pageTitle":"VRFBallClient","url":"/api/VRFBallClient#StopVelocityAndForce","content":"&lt;/&gt; VRFBallClient:StopVelocityAndForce(reactIndex: number) → () Stops any ongoing forces acting on the ball. Does not stop the ball from moving.  ","version":null,"tagName":"h3"},{"title":"StopBall​","type":1,"pageTitle":"VRFBallClient","url":"/api/VRFBallClient#StopBall","content":"&lt;/&gt; VRFBallClient:StopBall(reactIndex: number) → () Stops the ball from moving.  ","version":null,"tagName":"h3"},{"title":"ReserveReact​","type":1,"pageTitle":"VRFBallClient","url":"/api/VRFBallClient#ReserveReact","content":"&lt;/&gt; VRFBallClient:ReserveReact() → number Returns a react index [react reservation] ","version":null,"tagName":"h3"}],"options":{"id":"default"}}